pragma solidity ^0.4.24;

contract sm2{
    mapping (bytes32 => uint) cnt;
    mapping (address => bool) volid;
    mapping (bytes32 => bool) check;
    uint num = 2;
    address addrRecov;
    constructor(address[]volidators){
        for(uint i = 0; i<volidators.length;i++){
            volid[volidators[i]] = true;
        }
    }
    
    
    
    
    
    
    
    function transwerMessage(address _to, bytes _data) public{
        RequessToPasMessage(_to, _data);
    }
    event RequessToPasMessage(
        address _to,
        bytes _data
    );
    
    
    
    
    
    
    

    function PassSignatureFromCheap (address _to, bytes _data, bytes32 _trhhash, uint8[] _v, bytes32[] _r, bytes32[] _s){
        for(uint i = 0; i < num; i++){
            addrRecov = ecrecover(keccak256(_to, _data, _trhhash), _v[i], _r[i], _s[i]);
            require(volid[addrRecov] == true);
            bytes32 hash = keccak256(addrRecov, _to, _data, _trhhash);
            if(check[hash] == false){
                check[hash] = true;
                hash = keccak256(_to, _data, _trhhash);
                cnt[hash]++;
                if(cnt[hash]==2){
                    if(_to.call(_data) == true){
                        MessageSucessfulPassed(_to, _data);
                        return;
                    }
                    else{
                        MessagePassFail(_to, _data);
                        return; 
                    }
                }
            }
        }
    }
    
    event MessageSucessfulPassed(
        address indexed to,
        bytes  data
    );
    event MessagePassFail(
        address indexed to,
        bytes data
    );
    
}
