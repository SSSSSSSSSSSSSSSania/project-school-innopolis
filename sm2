pragma solidity ^0.4.24;

contract sm2{
    mapping (bytes32 => uint) cnt;
    mapping (address => bool) volid;
    mapping (bytes32 => bool) check;
    uint num;
    uint validcnt = 0;
    address addrRecov;
    
    constructor(address[]volidators, uint _num){
        require(_num > 0);
        for(uint i = 0; i < volidators.length; i++){
            if(volid[volidators[i]] == false){
                volid[volidators[i]] = true;
                validcnt++;
            }
        }
        num = _num;
        require(_num <= validcnt);
    }
    
    function addValid(address _a){
        require(volid[msg.sender] == true);
        require(volid[_a] == false);
        volid[_a] = true;
        validcnt++;
    }
    
    function removeValid(address _a){
        require(num > validcnt);
        require(volid[msg.sender] == true);
        require(volid[_a] == true);
        volid[_a] = false;
        validcnt--;
    }
    
    function setSignatures(uint _num){
        require(_num >= validcnt);
        require(_num > 0);
        num = _num;
    }
    
    
    
    
    
    function transwerMessage(address _to, bytes _data) public{
        RequessToPasMessage(_to, _data);
    }
    event RequessToPasMessage(
        address _to,
        bytes _data
    );
    
    
    
    
    
    
    

    function PassSignatureFromCheap (address _to, bytes _data, bytes32 _trhhash, uint8[] _v, bytes32[] _r, bytes32[] _s){
        require(validcnt >= num && num > 0);
        for(uint i = 0; i < num; i++){
            addrRecov = ecrecover(keccak256(abi.encodePacked(_to, _data, _trhhash)), _v[i], _r[i], _s[i]);
            require(volid[addrRecov] == true);
            bytes32 hash = keccak256(abi.encodePacked(addrRecov, _to, _data, _trhhash));
            if(check[hash] == false){
                check[hash] = true;
                hash = keccak256(abi.encodePacked(_to, _data, _trhhash));
                cnt[hash]++;
                if(cnt[hash] == num){
                    if(_to.call(_data) == true){
                        MessageSucessfulPassed(_to, _data);
                        return;
                    }
                    else{
                        MessagePassFail(_to, _data);
                        return; 
                    }
                }
            }
        }
    }
    
    event MessageSucessfulPassed(
        address indexed to,
        bytes  data
    );
    event MessagePassFail(
        address indexed to,
        bytes data
    );
    
}
