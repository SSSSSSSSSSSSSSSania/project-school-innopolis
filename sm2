pragma solidity ^0.4.24;

contract sm2{
    uint cnt;
    mapping (address => bool) public volid;
    mapping (bytes32 => bool) public check;
    function addValid(){
        volid[0xe868b537d601a40244bca72f7a7bf71ecb966dda] = true;
        volid[0x570921b1bc7d749f13a162fb5f1c89e0aaa7aba8] = true;
        cnt = 0;
    }
    
    event MessageSucessfulPassed(address indexed addre,bytes  byt);
    event MessagePassFail(address indexed ad,bytes by);
    
    function PassMesage (address _addre, bytes _data, bytes32 _trhhash){
        if(volid[msg.sender] == true){
            volid[msg.sender] = false;
            bytes32 hash = keccak256(msg.sender, _addre, _data, _trhhash);
            if(check[hash] == false){
                check[hash] = true;
                cnt++;
                if(cnt==2){
                    if(_addre.call(_data) == true){
                        MessageSucessfulPassed(_addre,_data);
                    }
                    else{
                        MessagePassFail(_addre,_data);
                    }
                }
            }
        }
    }
}
