pragma solidity ^0.4.24;

contract sm2{
    mapping (bytes32 => uint) public cnt;
    mapping (address => bool) public volid;
    mapping (bytes32 => bool) public check;
    constructor(address[]volidators){
        for(uint i = 0; i<volidators.length;i++){
            volid[volidators[i]] = true;
        }
    }
    uint num = 1;
    event MessageSucessfulPassed(address indexed addre,bytes  byt);
    event MessagePassFail(address indexed ad,bytes by);
    
    function PassMesage (address _addre, bytes _data, bytes32 _trhhash){
        require(volid[msg.sender] == true);
        bytes32 hash = keccak256(msg.sender, _addre, _data, _trhhash);
        require(check[hash] == false);
        check[hash] = true;
        hash = keccak256(_addre, _data, _trhhash);
        cnt[hash]++;
        require(cnt[hash]==num);
        if(_addre.call(_data) == true){
            MessageSucessfulPassed(_addre,_data);
            return;
        }
        else{
            MessagePassFail(_addre,_data);
            return; 
        }
    }
}
